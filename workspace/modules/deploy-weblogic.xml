<?xml version="1.0" encoding="UTF-8"?>
<!--
	  This build.xml file contains the tasks common to most if not all of the
	  projects.  The basedir is not set here as it is meaningless in this context.
-->
<project name="deploy-weblogic" default="deploy" basedir=".">

	<!-- Define an if and else task for use in this definition -->
	<taskdef name="if" classname="ise.antelope.tasks.IfTask" classpath="${global.dir}/../lib/atg-ant.jar" />

	<taskdef name="else" classname="ise.antelope.tasks.ElseTask" classpath="${global.dir}/../lib/atg-ant.jar" />

	<taskdef name="foreach" classname="net.sf.antcontrib.logic.ForEach" classpath="${global.dir}/../lib/ant-contrib.jar" />

	<taskdef name="propertycopy" classname="net.sf.antcontrib.property.PropertyCopy" classpath="${global.dir}/../lib/ant-contrib.jar" />

	<taskdef name="switch" classname="net.sf.antcontrib.logic.Switch" classpath="${global.dir}/../lib/ant-contrib.jar" />

	<!--ACT dir-->
	<property name="act.dir" value="${global.dir}/../modules/ACT" />

	<!-- ================================================================= -->
	<!--                    Some initialization tasks.                     -->
	<target name="-deployinit">
		<!-- Create the timestamp -->
		<tstamp />
		<echo message="" />
		<echo message="" />
		<echo message="#############################################################################" />
		<echo message="" />
		<echo message="${module.name}: start date = ${DSTAMP}  start time = ${TSTAMP}" />
		<echo message="JAVA_HOME       = ${env.JAVA_HOME}" />
		<echo message="dynamo.home     = ${dynamo.home}" />
		<echo message="deploy.definition.file = ${deploy.definition.file}" />
		<echo message="global.dir      = ${global.dir}" />
		<echo message="common.dir      = ${common.dir}" />
		<echo message="" />
		<echo message="#############################################################################" />
		<echo message="" />
		<echo message="" />
		<!-- Sleep for a bit -->
		<sleep seconds="2" />
	</target>


	<target name="-j2eedirsexist" description="verifies that the j2ee directories exist">
		<available file="${j2ee.dir}" property="j2eedir.exists" />
	</target>

	<!-- ================================================================= -->
	<!--              deploy: Deploys the application.                     -->
	<target name="deploy" depends="-deployinit" description="Deploys J2EE application and any 3rd party ears or wars">

		<antcall target="-deploy-application-wars" />
		<!--antcall target="-copy-jboss-conf" /-->
		<!--antcall target="-copy-jboss-deploy" /-->

		<!-- print out the run assembler flag so we know what we are doing -->
		<echo>skip.run.assembler = ${skip.run.assembler}</echo>

		<!-- see if we should run the assembler.  This was put here to ensure only a 
			 single pass at generating an .ear file is made when the 'deploy' task 
			 is invoked from the master build.xml -->
		<if name="skip.run.assembler" value="true">
			<echo message="Skip running application assembler" />
			<else>
				<antcall target="-assemble-ear" />
			</else>
		</if>

	</target>

	<!-- =================================================================== -->
	<!--  -deploy-application-wars: deploy the war built for the application -->
	<target name="-deploy-application-wars" depends="-j2eedirsexist" if="j2eedir.exists" description="Deploys the J2EE application for the module">

		<!-- now we can create the exploded app and move it to the ATG install -->
		<antcall target="-create-exploded-dar" />

	</target>

	<!-- ================================================================= -->
	<!--           devdeploy: Deploys the application in dev mode          -->
	<target name="devdeploy" depends="-deployinit, -j2eedirsexist" description="Deploys J2EE application in dev mode by copying the JSPs.">
		<antcall target="-dev-deploy-application-wars" />
	</target>

	<target name="-dev-deploy-application-wars" depends="-j2eedirsexist" if="j2eedir.exists" description="Copies the J2EE application for the module">


		<echo message="devdeploy assets for ear with prefix: ${ears.to.assemble.id}" />
		<if name="ears.to.assemble.id" exists="true">

			<property name="earprefix" value="${ears.to.assemble.id}" />

			<!-- Use the passed prefix to copy the correct property value for our ear -->
			<propertycopy name="ear.todeploy.filename" from="${earprefix}.filename" />
			<propertycopy name="ear.todeploy.destination" from="${earprefix}.destination" />

			<echo message="Install To:   = ${ear.todeploy.destination}/${ear.todeploy.filename}" />
			<echo message="Install From: = ${j2ee.dir}" />

			<copy description="Copying j2ee files to deployment" todir="${ear.todeploy.destination}/${ear.todeploy.filename}" verbose="${copy.verbose.bool}">
				<fileset dir="${j2ee.dir}">
					<exclude name="META-INF/*.*" />
					<exclude name="WEB-INF/*.*" />
				</fileset>
			</copy>

			<else>
				<echo message="Skipping J2EE copying - no value for 'ears.to.assemble.id'" />
			</else>
		</if>

	</target>

	<!-- ================================================================= -->
	<!--
			create-ear-file: Creates an ear file by jarring the J2EE directory up.
		  -->
	  <target name="-create-ear-file" depends="-prepare-multi-war"
	          description="creates the ear file by jarring the ear (j2ee) directory">
	    <mkdir dir="${ear.dir}" />
	  	<if name="base.war.exists" value="true">
		  <jar destfile="${ear.dir}/${module.name}.ear">
		    <fileset dir="${ear.dir}">
		     <include name="**/*" />
		    </fileset>
		  </jar>
	  	  <else>
		    <jar destfile="${ear.dir}/${module.name}.ear">
		  	  <fileset dir="${j2ee.dir}">
		  	    <include name="**/*" />
		  	  </fileset>
		  	</jar>  	  	
	  	  </else>
	  	</if>
	  </target>
	 <!-- ================================================================= -->
		  <!--
		   use the base as base ,and copy the j2ee war copy to the the base with overwrite
     -->
	 <target name="-prepare-multi-war" depends="-base-war-exists" if="base.war.exists">
	  	<mkdir dir="${ear.dir}" />
	  	<path id="webstore.dirs">
	  	  <dirset dir="${j2ee.dir}">
	  		<include name="*.war"/>
	  		<exclude name="base.war"/>
	  	    <exclude name="storedocroot.war"/>
	  	  </dirset>
	  	</path>
	    <foreach param="target.webstore.dir" target="-copy-war-structure">
	  	  <path refid="webstore.dirs"/>
	  	</foreach>
		<copy todir="${ear.dir}" overwrite="true">
		  <fileset dir="${j2ee.dir}" />
		</copy>  	
	  </target>
	  
	  <target name="-copy-war-structure">
	    <basename property="webstore.dir.name" file="${target.webstore.dir}"/>
	  	<echo>webstore.dir.name=${webstore.dir.name}</echo>
	  	<if name="webstore.dir.name" value="mockup.war">
	  		<if name="create.mockups" exists="true" >
		  		<echo>start create mockups. create.mockups = ${create.mockups}</echo>	  
	  		  	<copy todir="${ear.dir}/mockup.war/">
	  			  <fileset dir="${j2ee.dir}/${create.mockups}"/>
	  			</copy>
	  			<!--
	  		    <foreach list="${create.mockups}" param="mockup.dir.name" target="-copy-mockup-war">
	  		  	</foreach>
	  		  	-->
	  		</if>
		  	<else>
				<copy todir="${ear.dir}/${webstore.dir.name}">
				  <fileset dir="${j2ee.dir}/base.war"/>
				</copy>	  		
		  	</else>		  		
	  	</if>

	  </target>
	<!--
	  <target name="-copy-mockup-war">
	  	<echo>run create mockup.war</echo>
	  	<copy todir="${ear.dir}/mockup.war/${mockup.dir.name}/">
		  <fileset dir="${j2ee.dir}/${mockup.dir.name}"/>
		</copy>		
	  	<available file="${ear.dir}/mockup.war/index.jsp" type="file" property="isExist"/>
	  	<if  name="isExist" value="false">
	  		<touch file="${ear.dir}/mockup.war/index.jsp"/>	
	  	</if>
	  	<echo file="${ear.dir}/mockup.war/index.jsp" append="true" message="&lt;a href=&quot;${mockup.dir.name}/index.jsp&quot; &gt; ${mockup.dir.name} &lt;/a&gt;&lt;br&gt;" />
		<echo message="&lt;a href=&quot;${mockup.dir.name}/index.jsp&quot; &gt; ${mockup.dir.name} &lt;/a&gt;&lt;br&gt;"  />
	  </target>
	 -->
	  <!-- ================================================================= -->
	  <!--
	    creates brand specific war files from the "base.war" the base 
	    template
	  -->
	  <target name="-base-war-exists" description="checks for the presence of common store war to inherit">
	  	<available file="${j2ee.dir}/base.war" property="base.war.exists" />
	  </target>
	<!-- ================================================================= -->
	<!--
			create-exploded-dar: Creates an exploded dar file, merging in all
			the changed files.
		  -->
	<target name="-create-exploded-dar" depends="-create-ear-file">
		<unjar src="${ear.dir}/${module.name}.ear" dest="${install.j2ee.dir}" />
		<echo>${install.j2ee.dir}</echo>
		<antcall target="-strip-whitespace" />

		<path id="web.inf.dirs">

			<dirset dir="${install.j2ee.dir}">
				<include name="**/WEB-INF" />
			</dirset>
		</path>

		<foreach param="target.webinf.dir" target="-copy-taglibs">
			<path refid="web.inf.dirs" />
		</foreach>
	</target>


	<!--
			Strips whitespace from the J2EE application as a preprocessing task
		  -->
	<target name="-strip-whitespace">

		<taskdef name="stripspaces" classname="com.atg.ant.taskdefs.StripWhitespaceFromJsp" classpath="${global.dir}/../lib/atg-ant.jar" />

		<if name="strip.j2ee.whitespace" value="true">

			<echo message="Stripping Whitespace" />
			<stripspaces>
				<fileset dir="${install.j2ee.dir}">
					<include name="**/*.jsp" />
					<include name="**/*.jspf" />
				</fileset>
			</stripspaces>

			<else>
				<echo message="strip.j2ee.whitespace set to false, skipping strip task" />
			</else>
		</if>

	</target>


	<target name="-copy-taglibs">
		<echo message="Copying Tag Libraries to directory ${target.webinf.dir}" />

		<!-- Taglib locations -->
		<property name="das.taglib.tld.dir" value="${dynamo.root.dir}/DAS/taglib/dspjspTaglib/1.0/tld" />
		<property name="das.taglib.lib.dir" value="${dynamo.root.dir}/DAS/taglib/dspjspTaglib/1.0/lib" />
		<property name="core.taglib.tld.dir" value="${dynamo.root.dir}/DAS/taglib/coreTaglib/1.0/tld" />
		<property name="core.taglib.lib.dir" value="${dynamo.root.dir}/DAS/taglib/coreTaglib/1.0/lib" />
		<property name="jstl.taglib.tld.dir" value="${dynamo.root.dir}/DAS/taglib/jstl/1.0/tld" />
		<property name="jstl.taglib.lib.dir" value="${dynamo.root.dir}/DAS/taglib/jstl/1.0/lib" />

		<copy todir="${target.webinf.dir}/lib" verbose="true">
			<fileset dir="${das.taglib.lib.dir}" />
			<fileset dir="${core.taglib.lib.dir}" />
			<fileset dir="${jstl.taglib.lib.dir}" />
		</copy>

		<copy todir="${target.webinf.dir}/taglib" verbose="true">
			<fileset dir="${das.taglib.tld.dir}" />
			<fileset dir="${core.taglib.tld.dir}" />
		</copy>

		<copy todir="${target.webinf.dir}" verbose="true">
			<fileset dir="${jstl.taglib.tld.dir}" />
		</copy>

	</target>

	<!--
	<target name="-copy-jboss-conf">
		<echo message="Copying Jboss Configuration file" />
		<copy todir="${jboss.server.dir}/${ear.store.server}/conf" verbose="true">
			<fileset dir="${global.dir}/../scripts">
				<include name="jbossts-properties.xml" />
			</fileset>
		</copy>

	</target>
	<target name="-copy-jboss-deploy">
		<echo message="Copying Jboss deploy xmlfile" />
		<copy todir="${jboss.server.dir}/${ear.store.server}/deploy" verbose="true">
			<fileset dir="${global.dir}/../deploy" />
		</copy>
	</target>
    -->

	<!-- ========================================================================== -->
	<!--  Using the value for ears.to.assemble.id fetch all the globally registered -->
	<!--  values required for ear deployment and use them to assemble the big-ear   -->
	<target name="-assemble-ear" description="Loop to runs ATG's application assembler for all the registered ears">

		<echo message="assembling ear: ${ears.to.assemble.id}" />

		<if name="ears.to.assemble.id" exists="true">

			<property name="earprefix" value="${ears.to.assemble.id}" />
			<antcall target="-run-j2ee-assembler" />
			<else>
				<echo message="Skipping J2EE deployment - no value for 'ears.to.assemble.id'" />
			</else>
		</if>

	</target>



	<!-- ================================================================= -->
	<!--                   runs the ATG J2EE assembler                     -->
	<target name="-run-j2ee-assembler" description="runs ATG's application assembler to produce the ATG big ear for 3rd party app servers">

		<!-- Use the passed prefix to copy the correct property value for our ear -->


		<propertycopy name="ear.todeploy.modules" from="${earprefix}.modules" />
		<propertycopy name="ear.todeploy.liveconfig" from="${earprefix}.liveconfig" />
		<if name="ears.standalone" value="true">
			<propertycopy name="ear.todeploy.server" from="standalone.module.name" />
			<propertycopy name="ear.todeploy.destination" from="ears.standalone.destination" />
			<propertycopy name="ear.todeploy.standalone" from="ears.standalone" />
			<propertycopy name="ear.todeploy.filename" from="ears.standalone.filename" />
			<else>
				<propertycopy name="ear.todeploy.server" from="${earprefix}.server" />
				<propertycopy name="ear.todeploy.destination" from="${earprefix}.destination" />
				<propertycopy name="ear.todeploy.standalone" from="${earprefix}.standalone" />
				<propertycopy name="ear.todeploy.filename" from="${earprefix}.filename" />
			</else>
		</if>

		<echo message="" />
		<echo message="earprefix = ${earprefix}" />
		<echo message="ear.todeploy.filename    = ${ear.todeploy.filename}" />
		<echo message="ear.todeploy.destination = ${ear.todeploy.destination}" />
		<echo message="ear.todeploy.modules     = ${ear.todeploy.modules}" />
		<echo message="ear.todeploy.server      = ${ear.todeploy.server}" />
		<echo message="ear.todeploy.liveconfig  = ${ear.todeploy.liveconfig}" />
		<echo message="ear.todeploy.standalone  = ${ear.todeploy.standalone}" />
		<echo message="modules.toplevel.dir     = ${modules.toplevel.dir}" />
		<echo message="" />

		<!-- delete ear file before reassembling -->
		<if name="ears.standalone" value="false">
			<echo message="removing ear ${ear.todeploy.destination}/${ear.todeploy.filename}" />
			<delete dir="${ear.todeploy.destination}/${ear.todeploy.filename}" failonerror="false" />
		</if>
		<!-- Assembly should not include the startDynamo.jar which appears on a windows 
				 environment when you run DAS.  This could be in the servers directory or
				 in the dynamo home directory.
			  -->
		<delete verbose="true">
			<fileset dir="${dynamo.home}" includes="**/startDynamo.jar" />
		</delete>

		<if name="execute.assembler.cmd" value="true">
			<echo message="No Network Connection declared - running assember by command line" />
			<antcall target="-execute-assembler-cmd" inheritall="true" />
			<else>
				<echo message="Using custom ATG ANT task to execute j2ee assembler" />
				<antcall target="-execute-assembler-task" inheritall="true" />
			</else>
		</if>

	</target>

	<target name="-execute-assembler-task" description="Executes ATG's runAssembler via ant task">
		<!-- A few notes about applications assembled for deployment

				 * standalone *
				 In standalone mode, the remote ACC will not be able to 
				 connect to the application.

				 ATG Bug #111140 notes that this task will fail without an internet connection
			-->
		<taskdef name="assemble-jar" classname="atg.appassembly.ant.CreateUnpackedEarTask" classpath="${dynamo.home}/lib/assembler.jar" />


		<!-- Check to see if the user set ${ear.todeploy.server}-->
		<if name="ear.todeploy.server" value="">
			<echo message="Assembling bigear with the following modules: ${ear.todeploy.modules}" />
			<echo message="Assembling bigear with no server, this means you'll need to start Weblogic with the -Datg.dynamo.server.name=&lt;atg-server&gt; argument" />
			<echo message="Assembling to ${ear.todeploy.destination}/${ear.todeploy.filename}" />
			<echo message="Assemble Standalone set to ${ear.todeploy.standalone}" />


			<assemble-jar dynamoRoot="${dynamo.root.dir}" dynamoModules="${ear.todeploy.modules}" destinationFile="${ear.todeploy.destination}/${ear.todeploy.filename}" overwrite="true" liveConfig="${ear.todeploy.liveconfig}" standalone="${ear.todeploy.standalone}" />

			<else>
				<echo message="Assembling bigear with the following modules: ${ear.todeploy.modules}" />
				<echo message="Assembling bigear with the following server: ${ear.todeploy.server}" />
				<echo message="Assembling to ${ear.todeploy.destination}/${ear.todeploy.filename}" />

				<assemble-jar dynamoRoot="${dynamo.root.dir}" dynamoModules="${ear.todeploy.modules}" destinationFile="${ear.todeploy.destination}/${ear.todeploy.filename}" overwrite="true" liveConfig="${ear.todeploy.liveconfig}" serverName="${ear.todeploy.server}" standalone="${ear.todeploy.standalone}" />
			</else>
		</if>

		<copy todir="${ear.todeploy.destination}/${ear.todeploy.filename}/META-INF" verbose="true" overwrite="true">
		    <fileset dir="${global.dir}">
			    <include name="weblogic-application.xml" />
		    </fileset>
		</copy>
		<delete dir="${ear.todeploy.destination}/${ear.todeploy.filename}/META-INF" includes="jboss-app.xml"/>
	</target>

	<target name="-execute-assembler-cmd" description="Executes ATG's runAssembler by command line call">

		<taskdef name="propertyregex" classname="net.sf.antcontrib.property.RegexTask" classpath="${global.dir}/../lib/ant-contrib.jar" />

		<!-- Configure various arguments to pass to runAssembler depending upon
					ANT properties set by the user.
			  -->
		<if name="ear.todeploy.liveconfig" value="true">
			<property name="assemble.cmd.liveconfig" value="-liveconfig" />
			<else>
				<property name="assemble.cmd.liveconfig" value="" />
			</else>
		</if>
		<if name="ear.todeploy.standalone" value="true">
			<property name="assemble.cmd.standalone" value="-standalone" />
			<else>
				<property name="assemble.cmd.standalone" value="" />
			</else>
		</if>
		<if name="ear.todeploy.server" value="">
			<property name="assemble.cmd.servername" value="" />
			<else>
				<property name="assemble.cmd.servername" value="-server ${ear.todeploy.server}" />
			</else>
		</if>

		<propertyregex property="assemble.cmd.modules" input="${ear.todeploy.modules}" regexp="," replace=" " casesensitive="false" />

		<echo message="Invoking RunAssembler Command ${dynamo.home}/bin/runAssembler" />
		<echo message="-overwrite" />
		<echo message="-omit-licenses" />
		<echo message="assemble.cmd.liveconfig=${assemble.cmd.liveconfig}" />
		<echo message="assemble.cmd.standalone=${assemble.cmd.standalone}" />
		<echo message="assemble.cmd.servername=${assemble.cmd.servername}" />
		<echo message="to destination: ${ear.todeploy.destination}/${ear.todeploy.filename}" />
		<echo message="assemble.cmd.modules=${assemble.cmd.modules}" />
		<echo message=" " />
		<!-- The syntax of the run assembler command is:
			   runAssembler [options] output-file-name -m module-list
			-->

       
		<exec dir="${dynamo.home}/bin/" vmlauncher="false" executable="${dynamo.home}/bin/runAssembler" failonerror="yes">
			<arg value="-overwrite" />
			<arg value="-omit-licenses" />
			<arg value="${assemble.cmd.liveconfig}" />
			<arg value="${assemble.cmd.standalone}" />
			<arg line="${assemble.cmd.servername}" />
			<arg value="${ear.todeploy.destination}/${ear.todeploy.filename}" />
			<arg line="-m ${assemble.cmd.modules}" />
		</exec>
		<if name="earprefix" value="ear.store">
			<property name="module.name" value="ClothingStore" />
			<else>
				<property name="module.name" value="ClothingStoreCA" />
			</else>
		</if>
		<echo message="Invoking Copy weblogic-application TODIR - ${ear.todeploy.destination}/${ear.todeploy.filename}/META-INF DIR - ${modules.toplevel.dir}\${module.name}\META-INF"  />
		<copy todir="${ear.todeploy.destination}/${ear.todeploy.filename}/META-INF" verbose="true" overwrite="true">
		    <fileset dir="${modules.toplevel.dir}\${module.name}\META-INF">
			    <include name="weblogic-application.xml" />
		    </fileset>
		</copy>		

	</target>

</project>
