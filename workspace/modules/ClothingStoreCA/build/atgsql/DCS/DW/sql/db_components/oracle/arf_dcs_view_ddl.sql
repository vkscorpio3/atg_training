



----------------------------------
--  ARF_LINE_ITEM aggregations  --
----------------------------------

CREATE MATERIALIZED VIEW LOG ON ARF_LINE_ITEM WITH ROWID (
SUBMIT_DAY_ID, SUBMITTED_SITE_ID, SUBMIT_SALES_CHANNEL_ID,
SEGCLSTR_ID, AGENT_ID, PRODUCT_ID, ORDER_ID,
QUANTITY,
STANDARD_UNIT_PRICE,
STANDARD_NET_REVENUE,
STANDARD_GROSS_REVENUE,
STANDARD_DISCOUNT_AMOUNT,
STANDARD_MARKDOWN_DISC_AMOUNT,
STANDARD_ORDER_SHIPPING_ALLOC,
STANDARD_ORDER_TAX_ALLOC,
STANDARD_ORDER_DISCOUNT_ALLOC,
STANDARD_APPSMT_CDT_ALLOC_AMT,
STANDARD_APPSMT_DBT_ALLOC_AMT,
STANDARD_PRICE_OVERRIDE_AMT
) INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW ARF_LINE_ITEM_MV_PRODUCT
BUILD DEFERRED REFRESH FAST ON DEMAND
AS
SELECT
  COUNT(*) AS NUM_LINE_ITEMS,
  ITEM.SUBMIT_DAY_ID AS SUBMIT_DAY_ID,
  DAY.DAY_TIMESTAMP AS DAY_TIMESTAMP,
  ITEM.SUBMITTED_SITE_ID AS SUBMIT_SITE_ID,
  ITEM.SUBMIT_SALES_CHANNEL_ID AS SUBMIT_SALES_CHANNEL_ID,
  ITEM.SEGCLSTR_ID AS SEGMENTCLUSTER_ID,
  ITEM.AGENT_ID AS AGENT_ID,
  ITEM.PRODUCT_ID AS PRODUCT_ID,
  SUM(ITEM.QUANTITY) AS TOTAL_QUANTITY,
  SUM(ITEM.STANDARD_UNIT_PRICE) AS TOTAL_STD_UNIT_PRICE,
  SUM(ITEM.STANDARD_NET_REVENUE) AS TOTAL_STD_NET_REVENUE,
  SUM(ITEM.STANDARD_GROSS_REVENUE) AS TOTAL_STD_GROSS_REVENUE,
  SUM(ITEM.STANDARD_DISCOUNT_AMOUNT) AS TOTAL_STD_DISCOUNT,
  SUM(ITEM.STANDARD_MARKDOWN_DISC_AMOUNT) AS TOTAL_STD_MARKDOWN_DISCOUNT,
  SUM(ITEM.STANDARD_ORDER_SHIPPING_ALLOC) AS TOTAL_STD_ORDER_SHIP_ALLOC,
  SUM(ITEM.STANDARD_ORDER_TAX_ALLOC) AS TOTAL_STD_ORDER_TAX_ALLOC,
  SUM(ITEM.STANDARD_ORDER_DISCOUNT_ALLOC) AS TOTAL_STD_ORDER_DSCNT_ALLOC,
  SUM(ITEM.STANDARD_APPSMT_CDT_ALLOC_AMT) AS TOTAL_STD_APPSMT_CRED_ALLOC,
  SUM(ITEM.STANDARD_APPSMT_DBT_ALLOC_AMT) AS TOTAL_STD_APPSMT_DEBIT_ALLOC,
  SUM(ITEM.STANDARD_PRICE_OVERRIDE_AMT) AS TOTAL_STD_PRICE_OVERRIDE
FROM
  ARF_LINE_ITEM ITEM,
  ARF_TIME_DAY DAY
WHERE
  ITEM.SUBMIT_DAY_ID = DAY.ID
GROUP BY
  ITEM.SUBMIT_DAY_ID,
  DAY.DAY_TIMESTAMP,
  ITEM.SUBMIT_SALES_CHANNEL_ID,
  ITEM.SEGCLSTR_ID,
  ITEM.AGENT_ID,
  ITEM.PRODUCT_ID,
  ITEM.SUBMITTED_SITE_ID;
  
create index ARF_LINE_ITEM_MV_PRODUCT_X1 on ARF_LINE_ITEM_MV_PRODUCT (SUBMIT_DAY_ID);
create index ARF_LINE_ITEM_MV_PRODUCT_X2 on ARF_LINE_ITEM_MV_PRODUCT (SUBMIT_SITE_ID);
create index ARF_LINE_ITEM_MV_PRODUCT_X3 on ARF_LINE_ITEM_MV_PRODUCT (SUBMIT_SALES_CHANNEL_ID);
create index ARF_LINE_ITEM_MV_PRODUCT_X4 on ARF_LINE_ITEM_MV_PRODUCT (SEGMENTCLUSTER_ID);
create index ARF_LINE_ITEM_MV_PRODUCT_X5 on ARF_LINE_ITEM_MV_PRODUCT (AGENT_ID);
create index ARF_LINE_ITEM_MV_PRODUCT_X6 on ARF_LINE_ITEM_MV_PRODUCT (PRODUCT_ID);
  
CREATE MATERIALIZED VIEW ARF_LINE_ITEM_MV_SUPPL_ORDERS
BUILD DEFERRED REFRESH FAST ON DEMAND
AS
SELECT
  COUNT(*) AS NUM_LINE_ITEMS,
  ITEM.SUBMIT_DAY_ID AS SUBMIT_DAY_ID,
  DAY.DAY_TIMESTAMP AS DAY_TIMESTAMP,
  ITEM.SUBMITTED_SITE_ID AS SUBMIT_SITE_ID,
  ITEM.ORDER_ID AS ORDER_ID,
  SUM(ITEM.QUANTITY) AS TOTAL_QUANTITY,
  SUM(ITEM.STANDARD_UNIT_PRICE) AS TOTAL_STD_UNIT_PRICE,
  SUM(ITEM.STANDARD_NET_REVENUE) AS TOTAL_STD_NET_REVENUE,
  SUM(ITEM.STANDARD_GROSS_REVENUE) AS TOTAL_STD_GROSS_REVENUE,
  SUM(ITEM.STANDARD_DISCOUNT_AMOUNT) AS TOTAL_STD_DISCOUNT,
  SUM(ITEM.STANDARD_MARKDOWN_DISC_AMOUNT) AS TOTAL_STD_MARKDOWN_DISCOUNT,
  SUM(ITEM.STANDARD_ORDER_SHIPPING_ALLOC) AS TOTAL_STD_ORDER_SHIP_ALLOC,
  SUM(ITEM.STANDARD_ORDER_TAX_ALLOC) AS TOTAL_STD_ORDER_TAX_ALLOC,
  SUM(ITEM.STANDARD_ORDER_DISCOUNT_ALLOC) AS TOTAL_STD_ORDER_DSCNT_ALLOC,
  SUM(ITEM.STANDARD_APPSMT_CDT_ALLOC_AMT) AS TOTAL_STD_APPSMT_CRED_ALLOC,
  SUM(ITEM.STANDARD_APPSMT_DBT_ALLOC_AMT) AS TOTAL_STD_APPSMT_DEBIT_ALLOC,
  SUM(ITEM.STANDARD_PRICE_OVERRIDE_AMT) AS TOTAL_STD_PRICE_OVERRIDE
FROM
  ARF_LINE_ITEM ITEM,
  ARF_TIME_DAY DAY
WHERE
  ITEM.SUBMIT_DAY_ID = DAY.ID
GROUP BY
  ITEM.SUBMIT_DAY_ID,
  DAY.DAY_TIMESTAMP,
  ITEM.SUBMITTED_SITE_ID,
  ITEM.ORDER_ID;
  
create index ARF_LINE_ITEM_MV_SUP_ORD_X1 on ARF_LINE_ITEM_MV_SUPPL_ORDERS (SUBMIT_DAY_ID);
create index ARF_LINE_ITEM_MV_SUP_ORD_X2 on ARF_LINE_ITEM_MV_SUPPL_ORDERS (SUBMIT_SITE_ID);

CREATE MATERIALIZED VIEW LOG ON ARF_LINE_ITEM_MV_SUPPL_ORDERS WITH ROWID (
NUM_LINE_ITEMS, SUBMIT_DAY_ID, DAY_TIMESTAMP, SUBMIT_SITE_ID, ORDER_ID,
TOTAL_QUANTITY,
TOTAL_STD_UNIT_PRICE,
TOTAL_STD_NET_REVENUE,
TOTAL_STD_GROSS_REVENUE,
TOTAL_STD_DISCOUNT,
TOTAL_STD_MARKDOWN_DISCOUNT,
TOTAL_STD_ORDER_SHIP_ALLOC,
TOTAL_STD_ORDER_TAX_ALLOC,
TOTAL_STD_ORDER_DSCNT_ALLOC,
TOTAL_STD_APPSMT_CRED_ALLOC,
TOTAL_STD_APPSMT_DEBIT_ALLOC,
TOTAL_STD_PRICE_OVERRIDE
)INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW ARF_LINE_ITEM_MV_UNIQUE_ORDERS
BUILD DEFERRED REFRESH FAST ON DEMAND
AS
SELECT
  SUM(ITEM.NUM_LINE_ITEMS) AS NUM_LINE_ITEMS,
  COUNT(*) AS NUM_ORDERS,
  ITEM.SUBMIT_DAY_ID AS SUBMIT_DAY_ID,
  ITEM.DAY_TIMESTAMP AS DAY_TIMESTAMP,
  ITEM.SUBMIT_SITE_ID AS SUBMIT_SITE_ID,
  SUM(ITEM.TOTAL_QUANTITY) AS TOTAL_QUANTITY,
  SUM(ITEM.TOTAL_STD_UNIT_PRICE) AS TOTAL_STD_UNIT_PRICE,
  SUM(ITEM.TOTAL_STD_NET_REVENUE) AS TOTAL_STD_NET_REVENUE,
  SUM(ITEM.TOTAL_STD_GROSS_REVENUE) AS TOTAL_STD_GROSS_REVENUE,
  SUM(ITEM.TOTAL_STD_DISCOUNT) AS TOTAL_STD_DISCOUNT,
  SUM(ITEM.TOTAL_STD_MARKDOWN_DISCOUNT) AS TOTAL_STD_MARKDOWN_DISCOUNT,
  SUM(ITEM.TOTAL_STD_ORDER_SHIP_ALLOC) AS TOTAL_STD_ORDER_SHIP_ALLOC,
  SUM(ITEM.TOTAL_STD_ORDER_TAX_ALLOC) AS TOTAL_STD_ORDER_TAX_ALLOC,
  SUM(ITEM.TOTAL_STD_ORDER_DSCNT_ALLOC) AS TOTAL_STD_ORDER_DSCNT_ALLOC,
  SUM(ITEM.TOTAL_STD_APPSMT_CRED_ALLOC) AS TOTAL_STD_APPSMT_CRED_ALLOC,
  SUM(ITEM.TOTAL_STD_APPSMT_DEBIT_ALLOC) AS TOTAL_STD_APPSMT_DEBIT_ALLOC,
  SUM(ITEM.TOTAL_STD_PRICE_OVERRIDE) AS TOTAL_STD_PRICE_OVERRIDE
FROM
  ARF_LINE_ITEM_MV_SUPPL_ORDERS ITEM
GROUP BY
  ITEM.SUBMIT_DAY_ID,
  ITEM.DAY_TIMESTAMP,
  ITEM.SUBMIT_SITE_ID;
  
create index ARF_LINE_ITEM_MV_UNQ_ORD_X1 on ARF_LINE_ITEM_MV_UNIQUE_ORDERS (SUBMIT_DAY_ID);
create index ARF_LINE_ITEM_MV_UNQ_ORD_X2 on ARF_LINE_ITEM_MV_UNIQUE_ORDERS (SUBMIT_SITE_ID);
  
----------------------------------------
--  ARF_PROMOTION_USAGE aggregations  --
----------------------------------------

CREATE MATERIALIZED VIEW LOG ON ARF_PROMOTION_USAGE WITH ROWID(
DAY_ID, SITE_ID, PROMOTION_ID,
QUANTITY,
STANDARD_DISCOUNT_AMOUNT,
STANDARD_ORDER_NET_REVENUE,
STANDARD_NET_REVENUE
) INCLUDING NEW VALUES;

CREATE MATERIALIZED VIEW ARF_PROMOTION_USAGE_MV
BUILD DEFERRED REFRESH FAST ON DEMAND
AS
SELECT
  COUNT(*) AS NUM_PROMOS_USED,
  PROMO.DAY_ID AS DAY_ID,
  DAY.DAY_TIMESTAMP AS DAY_TIMESTAMP,
  PROMO.SITE_ID AS SITE_ID,
  PROMO.PROMOTION_ID AS PROMOTION_ID,
  SUM(PROMO.QUANTITY) AS TOTAL_QUANTITY,
  SUM(PROMO.STANDARD_DISCOUNT_AMOUNT) AS TOTAL_STD_DISCOUNT,
  SUM(PROMO.STANDARD_ORDER_NET_REVENUE) AS TOTAL_STD_ORD_NET_REVENUE,
  SUM(PROMO.STANDARD_NET_REVENUE) AS TOTAL_STD_NET_REVENUE
FROM
  ARF_PROMOTION_USAGE PROMO,
  ARF_TIME_DAY DAY
WHERE
  PROMO.DAY_ID = DAY.ID
GROUP BY
  PROMO.DAY_ID,
  DAY.DAY_TIMESTAMP,
  PROMO.SITE_ID,
  PROMO.PROMOTION_ID;
  
create index ARF_PROMOTION_USAGE_MV_X1 on ARF_PROMOTION_USAGE_MV (DAY_ID);
create index ARF_PROMOTION_USAGE_MV_X2 on ARF_PROMOTION_USAGE_MV (SITE_ID);
create index ARF_PROMOTION_USAGE_MV_X3 on ARF_PROMOTION_USAGE_MV (PROMOTION_ID);

COMMIT;


